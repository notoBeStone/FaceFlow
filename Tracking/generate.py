import yaml
import os

# Define file paths relative to the script location
script_dir = os.path.dirname(__file__)
yaml_file_path = os.path.join(script_dir, 'tracking.yaml')
swift_file_path = os.path.join(script_dir, '..', 'AquaAI', 'Tracking', 'TrackingEvent.swift') # Navigate up and then into EasySing/Tracking

# Read YAML data
try:
    with open(yaml_file_path, 'r') as f:
        tracking_data = yaml.safe_load(f)
except FileNotFoundError:
    print(f"Error: {yaml_file_path} not found.")
    exit(1)
except yaml.YAMLError as e:
    print(f"Error parsing YAML file: {e}")
    exit(1)

# Prepare Swift enum content
swift_code = """//
//  TrackingEvent.swift
//  AquaAI
//
//  Autogenerated by script. Do not modify manually.
//

import Foundation

typealias PageName = String

enum TrackingEvent: String {
"""

# Generate enum cases
if tracking_data:
    for page, events in tracking_data.items():
        if isinstance(events, list):
            for event in events:
                case_name = f"{page}_{event}"
                swift_code += f"  case {case_name}\n"

swift_code += "}\n\n"

# Generate String extension for page names
swift_code += """extension PageName {
"""

# Generate static let constants for page names
if tracking_data:
    for page in tracking_data.keys():
        swift_code += f"  static let {page} = \"{page}\"\n"

swift_code += "}\n"

# Ensure the target directory exists
os.makedirs(os.path.dirname(swift_file_path), exist_ok=True)

# Write to Swift file
try:
    with open(swift_file_path, 'w') as f:
        f.write(swift_code)
    print(f"Successfully generated {swift_file_path}")
except IOError as e:
    print(f"Error writing to Swift file: {e}")
    exit(1)
