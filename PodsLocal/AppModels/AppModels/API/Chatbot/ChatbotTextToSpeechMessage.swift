//
//  this file is automatically generated, DO NOT MODIFY IT
//
//  Copyright © 2015 Glority. All rights reserved.
//

import Foundation
import DGMessageAPI

public struct ChatbotTextToSpeechRequest: APIEncodableRequest {
    public typealias Response = ChatbotTextToSpeechResponse

    /**
     * 需要转换的文本
     */
    public var text: String

    /**
     * google voiceId @see https://cloud.google.com/text-to-speech/docs/voices?hl=zh-cn
     */
    public var voiceId: String

    /**
     * 范围[0.25, 4.0]，语音速率
     */
    public var speed: Double?

    /**
     * 音频格式
     */
    public var outputFormat: String?

    enum CodingKeys: String, CodingKey {
        case text = "text"

        case voiceId = "voice_id"

        case speed = "speed"

        case outputFormat = "output_format"
    }
    
    public init(
            text: String, 
            voiceId: String, 
            speed: Double? = nil, 
            outputFormat: String? = nil) {
        self.text = text
        self.voiceId = voiceId
        self.speed = speed
        self.outputFormat = outputFormat
    }
    
    public var api: String {
        "v4/chatbot/text_to_speech"
    }
    
    public var forceHttps: Bool {
        true
    }
    
    public var needAuth: Bool {
        true
    }
    
    public var mustAuth: Bool {
        true
    }
    
    public var methods: [String] {
        ["POST"]
    }
    
    public var mimeBodies: [APIMimeBody] {
        var bodies: [APIMimeBody] = []

        return bodies
    }
    
    public func parseParamater<T>(encoder: T) throws -> T.Output where T : APIEncoder {
        try encoder.encode(self)
    }
}

public struct ChatbotTextToSpeechResponse: APIJSONResponse {
    /**
     * 转换后为base64格式的音频文件
     */
    public var audioBase64: String

    public var timepoints: [TimepointModel]

    enum CodingKeys: String, CodingKey {
        case audioBase64 = "audio_base64"

        case timepoints = "timepoints"
    }

    public init<T>(data: T.Input, decoder: T) throws where T : APIDecoder {
        self = try decoder.decode(ChatbotTextToSpeechResponse.self, from: data)
    }
}
