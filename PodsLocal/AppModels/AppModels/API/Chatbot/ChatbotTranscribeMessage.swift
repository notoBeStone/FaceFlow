//
//  this file is automatically generated, DO NOT MODIFY IT
//
//  Copyright © 2015 Glority. All rights reserved.
//

import Foundation
import DGMessageAPI

public struct ChatbotTranscribeRequest: APIEncodableRequest {
    public typealias Response = ChatbotTranscribeResponse

    /**
     * 需要转换的音频
     */
    public var audio: APIFile

    /**
     * 音频格式
     */
    public var audioFormat: String

    /**
     * 音频语言
     */
    public var audioLanguage: LanguageCode

    /**
     * 国家码：https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
     */
    public var countryCode: String

    enum CodingKeys: String, CodingKey {
        case audioFormat = "audio_format"

        case audioLanguage = "audio_language"

        case countryCode = "country_code"
    }
    
    public init(
            audio: APIFile, 
            audioFormat: String, 
            audioLanguage: LanguageCode, 
            countryCode: String) {
        self.audio = audio
        self.audioFormat = audioFormat
        self.audioLanguage = audioLanguage
        self.countryCode = countryCode
    }
    
    public var api: String {
        "v4/chatbot/transcribe"
    }
    
    public var forceHttps: Bool {
        true
    }
    
    public var needAuth: Bool {
        true
    }
    
    public var mustAuth: Bool {
        true
    }
    
    public var methods: [String] {
        ["POST"]
    }
    
    public var mimeBodies: [APIMimeBody] {
        var bodies: [APIMimeBody] = []

        bodies.append(APIMimeBody.file("audio", audio, "file", "application/octet-stream"))

        return bodies
    }
    
    public func parseParamater<T>(encoder: T) throws -> T.Output where T : APIEncoder {
        try encoder.encode(self)
    }
}

public struct ChatbotTranscribeResponse: APIJSONResponse {
    /**
     * 音频转换后的文本
     */
    public var text: String

    enum CodingKeys: String, CodingKey {
        case text = "text"
    }

    public init<T>(data: T.Input, decoder: T) throws where T : APIDecoder {
        self = try decoder.decode(ChatbotTranscribeResponse.self, from: data)
    }
}
