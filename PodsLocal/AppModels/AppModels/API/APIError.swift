//
//  this file is automatically generated, DO NOT MODIFY IT
//
//  Copyright Â© 2015 Glority. All rights reserved.
//

import Foundation
import DGMessageAPI

public enum APIErrorCode: Int, Codable {
    case success = 1

    case internalError = 1000

    case displayableError = 1001

    case storageError = 1002

    case invalidArgumentError = 1003

    case stsTokenError = 1004

    case mailerError = 1005

    case orderPriceChanged = 1006

    case smsSendError = 1007

    case loginAuthenticateError = 1008

    case authorizationError = 1009

    case transactionBelongToOtherUser = 1012

    case transactionPaymentProviderError = 1013

    case recognizeEngineError = 1022

    case serverInMaintainMode = 1023

    case uploadFileOverSize = 1024

    case itemNotExist = 1025

    case userNotHaveItem = 1026

    case userAlreadyExist = 1027

    case userPasswordError = 1028

    case userEmailFormatError = 1029

    case userLoginMethodNotSupport = 1030

    case userResetPasswordEmailNotExist = 1034

    case userResetPasswordSendVerifyCodeFrequently = 1035

    case userResetPasswordVerifyCodeExpired = 1036

    case userResetPasswordVerifyCodeError = 1037
}

public struct APIError: Error, Codable {
    public let code: APIErrorCode
    public let message: String

    public init(code: APIErrorCode, message: String?, locale: APILocale) {
        self.code = code
        if let message = message {
            self.message = message
        } else {
            switch code {
            case .success:
                self.message = locale.localizedString("SUCCESS")

            case .internalError:
                self.message = locale.localizedString("INTERNAL_ERROR")

            case .displayableError:
                self.message = locale.localizedString("DISPLAYABLE_ERROR")

            case .storageError:
                self.message = locale.localizedString("STORAGE_ERROR")

            case .invalidArgumentError:
                self.message = locale.localizedString("INVALID_ARGUMENT_ERROR")

            case .stsTokenError:
                self.message = locale.localizedString("STS_TOKEN_ERROR")

            case .mailerError:
                self.message = locale.localizedString("MAILER_ERROR")

            case .orderPriceChanged:
                self.message = locale.localizedString("ORDER_PRICE_CHANGED")

            case .smsSendError:
                self.message = locale.localizedString("SMS_SEND_ERROR")

            case .loginAuthenticateError:
                self.message = locale.localizedString("LOGIN_AUTHENTICATE_ERROR")

            case .authorizationError:
                self.message = locale.localizedString("AUTHORIZATION_ERROR")

            case .transactionBelongToOtherUser:
                self.message = locale.localizedString("TRANSACTION_BELONG_TO_OTHER_USER")

            case .transactionPaymentProviderError:
                self.message = locale.localizedString("TRANSACTION_PAYMENT_PROVIDER_ERROR")

            case .recognizeEngineError:
                self.message = locale.localizedString("RECOGNIZE_ENGINE_ERROR")

            case .serverInMaintainMode:
                self.message = locale.localizedString("SERVER_IN_MAINTAIN_MODE")

            case .uploadFileOverSize:
                self.message = locale.localizedString("UPLOAD_FILE_OVER_SIZE")

            case .itemNotExist:
                self.message = locale.localizedString("ITEM_NOT_EXIST")

            case .userNotHaveItem:
                self.message = locale.localizedString("USER_NOT_HAVE_ITEM")

            case .userAlreadyExist:
                self.message = locale.localizedString("USER_ALREADY_EXIST")

            case .userPasswordError:
                self.message = locale.localizedString("USER_PASSWORD_ERROR")

            case .userEmailFormatError:
                self.message = locale.localizedString("USER_EMAIL_FORMAT_ERROR")

            case .userLoginMethodNotSupport:
                self.message = locale.localizedString("USER_LOGIN_METHOD_NOT_SUPPORT")

            case .userResetPasswordEmailNotExist:
                self.message = locale.localizedString("USER_RESET_PASSWORD_EMAIL_NOT_EXIST")

            case .userResetPasswordSendVerifyCodeFrequently:
                self.message = locale.localizedString("USER_RESET_PASSWORD_SEND_VERIFY_CODE_FREQUENTLY")

            case .userResetPasswordVerifyCodeExpired:
                self.message = locale.localizedString("USER_RESET_PASSWORD_VERIFY_CODE_EXPIRED")

            case .userResetPasswordVerifyCodeError:
                self.message = locale.localizedString("USER_RESET_PASSWORD_VERIFY_CODE_ERROR")

            default:
                self.message = locale.localizedString("INTERNAL_ERROR")
            }
        }
    }
}
