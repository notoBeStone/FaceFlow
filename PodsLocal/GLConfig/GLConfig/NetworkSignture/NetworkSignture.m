//
//  NetworkSignture.m
//  GLConfig
//
//  Created by User on 2020/12/1.
//

#import "NetworkSignture.h"

@implementation NetworkSignture

static inline const char *hwl_strJoin(const char *s1, const char *s2, const char *s3, const char *s4) {
    char *result = (char *)malloc(strlen(s1) + strlen(s2) + strlen(s3) + strlen(s4) + 1); //+1 for the zero-terminator
    // in real code you would check for errors in malloc here
    if (result == NULL)
        exit(1);

    char *tempRes = result;
    const char *tempStrs[0x4] = { s1, s2, s3, s4 };
    char realStrs[0x4][0x25];
    for (int i = 0; i < 4; i += 1) {
        int tmp = ((*(tempStrs[i] + 0)) ^ 0xc) - 'A';
        strcpy(realStrs[tmp], tempStrs[i]);
        realStrs[tmp][0x24] = '\0';
    }
    size_t s1Len = strlen(realStrs[0]);
    size_t s2Len = strlen(realStrs[1]);
    size_t s3Len = strlen(realStrs[2]);
    size_t s4Len = strlen(realStrs[3]);
    size_t maxLen = MAX(MAX(s1Len, s2Len), MAX(s3Len, s4Len));
    char temStr;
    for (int i = 2; i < maxLen; i += 4) {
        // use prime value
        if (i < s1Len - 2) {
            int tmp = ((*(realStrs[0] + 1)) ^ 0xa) - 'F';
            int index = 2 + (i - 2) / 4 * 4 + tmp;
            temStr = *(realStrs[0] + index);
            *(tempRes++) = ((temStr) ^ (0x1));
        }
        if (i < s2Len - 2) {
            int tmp = ((*(realStrs[1] + 1)) ^ 0xa) - 'F';
            int index = 2 + (i - 2) / 4 * 4 + tmp;
            temStr = *(realStrs[1] + index);
            *(tempRes++) = ((temStr) ^ (0x2));
        }
        if (i < s3Len - 2) {
            int tmp = ((*(realStrs[2] + 1)) ^ 0xa) - 'F';
            int index = 2 + (i - 2) / 4 * 4 + tmp;
            temStr = *(realStrs[2] + index);
            *(tempRes++) = ((temStr) ^ (0x3));
        }
        if (i < s4Len - 2) {
            int tmp = ((*(realStrs[3] + 1)) ^ 0xa) - 'F';
            int index = 2 + (i - 2) / 4 * 4 + tmp;
            temStr = *(realStrs[3] + index);
            *(tempRes++) = ((temStr) ^ (0x1));
        }
    }
    *(tempRes) = '\0';
    return result;
}

// 加密请打开 .gitlab-ci.yml 中 SIGNATURE_FILE 字段
+ (NSString *)prod {
    return @"18216a1gfuYchzTmSQS6Tpkq2XxSAsPT";
}

+ (NSString *)stage {
    Byte b1[] = {0x4D, 0x43, 0x45, 0x53, 0x4C, 0x40, 0x4A, 0x45, 0x78, 0x74, 0x7A, 0x2D, 0x2B, 0x30, 0x35, 0x68, 0x78, 0x39, 0x53, 0x33, 0x72, 0x38, 0x67, 0x7A, 0x4E, 0x78, 0x46, 0x42, 0x5A, 0x6B, 0x4F, 0x77, 0x6A, 0x4A, 0x3D, 0x0A, 0x0};
Byte b2[] = {0x4E, 0x42, 0x30, 0x37, 0x67, 0x2A, 0x32, 0x51, 0x30, 0x65, 0x68, 0x55, 0x3B, 0x76, 0x42, 0x56, 0x5B, 0x57, 0x48, 0x48, 0x4D, 0x68, 0x4C, 0x6D, 0x65, 0x5A, 0x4A, 0x26, 0x3B, 0x54, 0x73, 0x32, 0x4C, 0x74, 0x3D, 0x0A, 0x0};
Byte b3[] = {0x4F, 0x4D, 0x56, 0x44, 0x6A, 0x79, 0x6B, 0x72, 0x2B, 0x5A, 0x63, 0x34, 0x61, 0x4A, 0x39, 0x6B, 0x4C, 0x54, 0x75, 0x61, 0x78, 0x4F, 0x57, 0x4A, 0x50, 0x42, 0x56, 0x71, 0x4E, 0x61, 0x6C, 0x60, 0x4A, 0x5A, 0x3D, 0x0A, 0x0};
Byte b4[] = {0x48, 0x4C, 0x38, 0x37, 0x43, 0x57, 0x74, 0x74, 0x4B, 0x57, 0x56, 0x5A, 0x77, 0x71, 0x36, 0x58, 0x2B, 0x70, 0x66, 0x52, 0x48, 0x52, 0x48, 0x68, 0x6F, 0x33, 0x5B, 0x6B, 0x31, 0x61, 0x76, 0x6C, 0x2B, 0x50, 0x3D, 0x0A, 0x0};
return [[NSString alloc] initWithCString:hwl_strJoin((const char *)b1, (const char *)b2, (const char *)b3, (const char *)b4) encoding:NSUTF8StringEncoding];
}

+ (NSString *)test {
    Byte b1[] = {0x4D, 0x43, 0x62, 0x31, 0x70, 0x34, 0x79, 0x46, 0x74, 0x38, 0x4B, 0x43, 0x37, 0x6B, 0x7A, 0x61, 0x7A, 0x4E, 0x31, 0x43, 0x50, 0x43, 0x58, 0x2D, 0x41, 0x32, 0x75, 0x6B, 0x6E, 0x54, 0x7A, 0x48, 0x73, 0x30, 0x3D, 0x0A, 0x0};
    Byte b2[] = {0x4E, 0x42, 0x48, 0x6C, 0x3B, 0x72, 0x30, 0x66, 0x7B, 0x73, 0x4D, 0x6D, 0x67, 0x4E, 0x6C, 0x61, 0x50, 0x53, 0x63, 0x45, 0x51, 0x53, 0x43, 0x51, 0x4F, 0x6F, 0x78, 0x65, 0x32, 0x43, 0x6E, 0x2D, 0x34, 0x6C, 0x3D, 0x0A, 0x0};
    Byte b3[] = {0x4F, 0x4D, 0x6A, 0x36, 0x4C, 0x5A, 0x31, 0x77, 0x30, 0x4C, 0x68, 0x6D, 0x50, 0x65, 0x2A, 0x5A, 0x58, 0x71, 0x76, 0x47, 0x39, 0x4B, 0x72, 0x3A, 0x6B, 0x61, 0x30, 0x65, 0x48, 0x69, 0x2B, 0x50, 0x69, 0x6C, 0x3D, 0x0A, 0x0};
    Byte b4[] = {0x48, 0x4C, 0x33, 0x33, 0x57, 0x56, 0x6E, 0x35, 0x72, 0x64, 0x53, 0x4B, 0x2D, 0x6B, 0x4C, 0x4E, 0x71, 0x69, 0x67, 0x79, 0x61, 0x41, 0x57, 0x55, 0x58, 0x61, 0x76, 0x73, 0x5A, 0x33, 0x33, 0x51, 0x74, 0x37, 0x3D, 0x0A, 0x0};
    return [[NSString alloc] initWithCString:hwl_strJoin((const char *)b1, (const char *)b2, (const char *)b3, (const char *)b4) encoding:NSUTF8StringEncoding];
}

@end
